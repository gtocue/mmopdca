/* tslint:disable */
/* eslint-disable */
/**
 * mmopdca API
 * Command-DSL-driven forecasting micro-service API only
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: gtocue510@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckResult,
  HTTPValidationError,
} from '../models/index';
import {
    CheckResultFromJSON,
    CheckResultToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface EnqueueCheckCheckDoIdPostRequest {
    doId: string;
}

export interface GetCheckCheckCheckIdGetRequest {
    checkId: string;
}

export interface GetCheckStatusCheckStatusTaskIdGetRequest {
    taskId: string;
}

/**
 * 
 */
export class CheckApi extends runtime.BaseAPI {

    /**
     * Check フェーズのタスクを Celery に登録 & 初期レコードを作成
     * Enqueue Check job (Celery)
     */
    async enqueueCheckCheckDoIdPostRaw(requestParameters: EnqueueCheckCheckDoIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['doId'] == null) {
            throw new runtime.RequiredError(
                'doId',
                'Required parameter "doId" was null or undefined when calling enqueueCheckCheckDoIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/check/{do_id}`.replace(`{${"do_id"}}`, encodeURIComponent(String(requestParameters['doId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check フェーズのタスクを Celery に登録 & 初期レコードを作成
     * Enqueue Check job (Celery)
     */
    async enqueueCheckCheckDoIdPost(requestParameters: EnqueueCheckCheckDoIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.enqueueCheckCheckDoIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 永続化されたチェックレコードを返却
     * Get Check record
     */
    async getCheckCheckCheckIdGetRaw(requestParameters: GetCheckCheckCheckIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckResult>> {
        if (requestParameters['checkId'] == null) {
            throw new runtime.RequiredError(
                'checkId',
                'Required parameter "checkId" was null or undefined when calling getCheckCheckCheckIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/check/{check_id}`.replace(`{${"check_id"}}`, encodeURIComponent(String(requestParameters['checkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckResultFromJSON(jsonValue));
    }

    /**
     * 永続化されたチェックレコードを返却
     * Get Check record
     */
    async getCheckCheckCheckIdGet(requestParameters: GetCheckCheckCheckIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckResult> {
        const response = await this.getCheckCheckCheckIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Celery タスクの生ステータスおよびエラーを取得
     * Raw Celery task state
     */
    async getCheckStatusCheckStatusTaskIdGetRaw(requestParameters: GetCheckStatusCheckStatusTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getCheckStatusCheckStatusTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/check/status/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Celery タスクの生ステータスおよびエラーを取得
     * Raw Celery task state
     */
    async getCheckStatusCheckStatusTaskIdGet(requestParameters: GetCheckStatusCheckStatusTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getCheckStatusCheckStatusTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 保存済みの Check レコードをすべて返却
     * List Check records
     */
    async listCheckCheckGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CheckResult>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/check/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckResultFromJSON));
    }

    /**
     * 保存済みの Check レコードをすべて返却
     * List Check records
     */
    async listCheckCheckGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CheckResult>> {
        const response = await this.listCheckCheckGetRaw(initOverrides);
        return await response.value();
    }

}
