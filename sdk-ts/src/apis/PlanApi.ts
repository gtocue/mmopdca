/* tslint:disable */
/* eslint-disable */
/**
 * mmopdca API
 * Command-DSL-driven forecasting micro-service API only
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: gtocue510@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PlanCreateRequest,
  PlanResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PlanCreateRequestFromJSON,
    PlanCreateRequestToJSON,
    PlanResponseFromJSON,
    PlanResponseToJSON,
} from '../models/index';

export interface CreatePlanPlanPostRequest {
    planCreateRequest: PlanCreateRequest;
}

export interface DeletePlanPlanPlanIdDeleteRequest {
    planId: string;
}

export interface GetPlanPlanPlanIdGetRequest {
    planId: string;
}

/**
 * 
 */
export class PlanApi extends runtime.BaseAPI {

    /**
     * 新しい Plan を登録する。  * `id` を省略すると `plan_<8桁>` を自動採番。 * 同じ `id` が既にあれば **409 Conflict**。
     * Create Plan
     */
    async createPlanPlanPostRaw(requestParameters: CreatePlanPlanPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters['planCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'planCreateRequest',
                'Required parameter "planCreateRequest" was null or undefined when calling createPlanPlanPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/plan/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlanCreateRequestToJSON(requestParameters['planCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * 新しい Plan を登録する。  * `id` を省略すると `plan_<8桁>` を自動採番。 * 同じ `id` が既にあれば **409 Conflict**。
     * Create Plan
     */
    async createPlanPlanPost(requestParameters: CreatePlanPlanPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanResponse> {
        const response = await this.createPlanPlanPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Plan
     */
    async deletePlanPlanPlanIdDeleteRaw(requestParameters: DeletePlanPlanPlanIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling deletePlanPlanPlanIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/plan/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Plan
     */
    async deletePlanPlanPlanIdDelete(requestParameters: DeletePlanPlanPlanIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePlanPlanPlanIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Plan by ID
     */
    async getPlanPlanPlanIdGetRaw(requestParameters: GetPlanPlanPlanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling getPlanPlanPlanIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/plan/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Get Plan by ID
     */
    async getPlanPlanPlanIdGet(requestParameters: GetPlanPlanPlanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanResponse> {
        const response = await this.getPlanPlanPlanIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Plans
     */
    async listPlansPlanGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlanResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/plan/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlanResponseFromJSON));
    }

    /**
     * List Plans
     */
    async listPlansPlanGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlanResponse>> {
        const response = await this.listPlansPlanGetRaw(initOverrides);
        return await response.value();
    }

}
