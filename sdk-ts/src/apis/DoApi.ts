/* tslint:disable */
/* eslint-disable */
/**
 * mmopdca API
 * Command-DSL-driven forecasting micro-service API only
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: gtocue510@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DoCreateRequest,
  DoResponse,
  HTTPValidationError,
} from '../models/index';
import {
    DoCreateRequestFromJSON,
    DoCreateRequestToJSON,
    DoResponseFromJSON,
    DoResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface EnqueueDoDoPlanIdPostRequest {
    planId: string;
    doCreateRequest?: DoCreateRequest;
}

export interface GetDoDoDoIdGetRequest {
    doId: string;
}

export interface GetDoStatusDoStatusTaskIdGetRequest {
    taskId: string;
}

/**
 * 
 */
export class DoApi extends runtime.BaseAPI {

    /**
     * Plan に紐づく Do フェーズのジョブを Celery に enqueue（または同期実行）する。
     * Enqueue Do job (Celery)
     */
    async enqueueDoDoPlanIdPostRaw(requestParameters: EnqueueDoDoPlanIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling enqueueDoDoPlanIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/do/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DoCreateRequestToJSON(requestParameters['doCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Plan に紐づく Do フェーズのジョブを Celery に enqueue（または同期実行）する。
     * Enqueue Do job (Celery)
     */
    async enqueueDoDoPlanIdPost(requestParameters: EnqueueDoDoPlanIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.enqueueDoDoPlanIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * do_id で指定した Do レコードを返す。
     * Get Do record
     */
    async getDoDoDoIdGetRaw(requestParameters: GetDoDoDoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DoResponse>> {
        if (requestParameters['doId'] == null) {
            throw new runtime.RequiredError(
                'doId',
                'Required parameter "doId" was null or undefined when calling getDoDoDoIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/do/{do_id}`.replace(`{${"do_id"}}`, encodeURIComponent(String(requestParameters['doId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoResponseFromJSON(jsonValue));
    }

    /**
     * do_id で指定した Do レコードを返す。
     * Get Do record
     */
    async getDoDoDoIdGet(requestParameters: GetDoDoDoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DoResponse> {
        const response = await this.getDoDoDoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Celery の AsyncResult を使って、タスクの生の状態を返す。
     * Raw Celery task state
     */
    async getDoStatusDoStatusTaskIdGetRaw(requestParameters: GetDoStatusDoStatusTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getDoStatusDoStatusTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/do/status/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Celery の AsyncResult を使って、タスクの生の状態を返す。
     * Raw Celery task state
     */
    async getDoStatusDoStatusTaskIdGet(requestParameters: GetDoStatusDoStatusTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getDoStatusDoStatusTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 保存済みの全 Do レコード一覧を返す。
     * List Do records
     */
    async listDoDoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DoResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/do/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DoResponseFromJSON));
    }

    /**
     * 保存済みの全 Do レコード一覧を返す。
     * List Do records
     */
    async listDoDoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DoResponse>> {
        const response = await this.listDoDoGetRaw(initOverrides);
        return await response.value();
    }

}
