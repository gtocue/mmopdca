/* tslint:disable */
/* eslint-disable */
/**
 * mmopdca API
 * Command-DSL-driven forecasting micro-service API only
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: gtocue510@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MetricMeta,
  MetricValue,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MetricMetaFromJSON,
    MetricMetaToJSON,
    MetricValueFromJSON,
    MetricValueToJSON,
} from '../models/index';

export interface GetMetricValueMetricsNameGetRequest {
    name: string;
}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI {

    /**
     * Get instant metric value
     */
    async getMetricValueMetricsNameGetRaw(requestParameters: GetMetricValueMetricsNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricValue>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getMetricValueMetricsNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/metrics/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricValueFromJSON(jsonValue));
    }

    /**
     * Get instant metric value
     */
    async getMetricValueMetricsNameGet(requestParameters: GetMetricValueMetricsNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricValue> {
        const response = await this.getMetricValueMetricsNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List metric catalog
     */
    async listMetricsMetricsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MetricMeta>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/metrics/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetricMetaFromJSON));
    }

    /**
     * List metric catalog
     */
    async listMetricsMetricsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MetricMeta>> {
        const response = await this.listMetricsMetricsGetRaw(initOverrides);
        return await response.value();
    }

}
