/* tslint:disable */
/* eslint-disable */
/**
 * mmopdca API
 * Command-DSL-driven forecasting micro-service API only
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: gtocue510@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ActDecisionFromJSON, } from '../models/index';
/**
 *
 */
export class ActApi extends runtime.BaseAPI {
    /**
     * Run Act (decide next action)
     */
    async createActActCheckIdPostRaw(requestParameters, initOverrides) {
        if (requestParameters['checkId'] == null) {
            throw new runtime.RequiredError('checkId', 'Required parameter "checkId" was null or undefined when calling createActActCheckIdPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }
        const response = await this.request({
            path: `/act/{check_id}`.replace(`{${"check_id"}}`, encodeURIComponent(String(requestParameters['checkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ActDecisionFromJSON(jsonValue));
    }
    /**
     * Run Act (decide next action)
     */
    async createActActCheckIdPost(requestParameters, initOverrides) {
        const response = await this.createActActCheckIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get ActDecision
     */
    async getActActActIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters['actId'] == null) {
            throw new runtime.RequiredError('actId', 'Required parameter "actId" was null or undefined when calling getActActActIdGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }
        const response = await this.request({
            path: `/act/{act_id}`.replace(`{${"act_id"}}`, encodeURIComponent(String(requestParameters['actId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ActDecisionFromJSON(jsonValue));
    }
    /**
     * Get ActDecision
     */
    async getActActActIdGet(requestParameters, initOverrides) {
        const response = await this.getActActActIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List ActDecision
     */
    async listActActGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }
        const response = await this.request({
            path: `/act/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActDecisionFromJSON));
    }
    /**
     * List ActDecision
     */
    async listActActGet(initOverrides) {
        const response = await this.listActActGetRaw(initOverrides);
        return await response.value();
    }
}
