/* tslint:disable */
/* eslint-disable */
/**
 * mmopdca API
 * Command-DSL-driven forecasting micro-service API only
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: gtocue510@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { PlanResponseFromJSON, } from '../models/index';
/**
 *
 */
export class PlanDslApi extends runtime.BaseAPI {
    /**
     * DSL ファイル *または* 生テキスト body を受け取り Plan を登録。  **PowerShell 例**  ```powershell $yaml = Get-Content .\\samples\\plan_mvp.yaml -Raw Invoke-RestMethod `   -Uri \'http://localhost:8001/plan-dsl/\' `   -Method Post `   -Body $yaml `   -ContentType \'application/x-yaml\' ```
     * Create Plan from DSL (YAML / JSON)
     */
    async createPlanDslPlanDslPostRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }
        const consumes = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file']);
        }
        const response = await this.request({
            path: `/plan-dsl/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }
    /**
     * DSL ファイル *または* 生テキスト body を受け取り Plan を登録。  **PowerShell 例**  ```powershell $yaml = Get-Content .\\samples\\plan_mvp.yaml -Raw Invoke-RestMethod `   -Uri \'http://localhost:8001/plan-dsl/\' `   -Method Post `   -Body $yaml `   -ContentType \'application/x-yaml\' ```
     * Create Plan from DSL (YAML / JSON)
     */
    async createPlanDslPlanDslPost(requestParameters = {}, initOverrides) {
        const response = await this.createPlanDslPlanDslPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get DSL Plan
     */
    async getPlanDslPlanDslPlanIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError('planId', 'Required parameter "planId" was null or undefined when calling getPlanDslPlanDslPlanIdGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }
        const response = await this.request({
            path: `/plan-dsl/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }
    /**
     * Get DSL Plan
     */
    async getPlanDslPlanDslPlanIdGet(requestParameters, initOverrides) {
        const response = await this.getPlanDslPlanDslPlanIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List DSL Plans
     */
    async listPlansDslPlanDslGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }
        const response = await this.request({
            path: `/plan-dsl/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlanResponseFromJSON));
    }
    /**
     * List DSL Plans
     */
    async listPlansDslPlanDslGet(initOverrides) {
        const response = await this.listPlansDslPlanDslGetRaw(initOverrides);
        return await response.value();
    }
}
