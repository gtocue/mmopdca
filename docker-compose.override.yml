services:
  # ───────────────────────────── API
  api:
    build:
      context: .
      dockerfile: Dockerfile.main_api
    volumes:
      - dsl_data:/mnt/data/dsl
      - ./ops/init-dsl.sh:/usr/local/bin/docker-entrypoint-init-dsl.sh:ro

  # ───────────────────────────── Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command: [ "celery", "-A", "core.celery_app:celery_app", "worker", "--loglevel=info" ]
    user: "1000:1000"
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
      - ./ops/init-dsl.sh:/usr/local/bin/docker-entrypoint-init-dsl.sh:ro

  # ───────────────────────────── Beat
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command:
      - celery
      - "-A"
      - core.celery_app:celery_app
      - beat
      - "--loglevel=info"
      - "--schedule=/mnt/checkpoints/celerybeat-schedule"
    user: "1000:1000"
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
      - ./ops/init-dsl.sh:/usr/local/bin/docker-entrypoint-init-dsl.sh:ro

  # ───────────────────────────── Redis / DB（内部）
  redis:
    image: redis:7-alpine
    ports: [] # 本番同様 外部公開しない

  db:
    image: postgres:16-alpine
    ports: [] # 本番同様 外部公開しない

  # ───────────────────────────── Flower（5555 を開放）
  flower:
    image: mher/flower:1.2
    ports:
      - "5555:5555"

  # ───────────────────────────── Prometheus（9090 を開放）
  prom:
    image: prom/prometheus:v2.52.0
    ports:
      - "9090:9090"

  # ───────────────────────────── Grafana（3000 を開放）
  grafana:
    image: grafana/grafana-oss:10.4.2
    ports:
      - "3000:3000"

  # ───────────────────────────── Nginx（443 は本番と同じ）
  nginx:
    image: nginx:1.27-alpine
    container_name: mmopdca-nginx
    ports:
      - "443:443"
    volumes:
      - ./ops/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/cert.pem:/etc/nginx/cert.pem:ro
      - ./ops/key.pem:/etc/nginx/key.pem:ro
    depends_on:
      - api
      - grafana
    restart: unless-stopped

  # ───────────────────────────── Celery Exporter（9808）
  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    environment:
      - CELERY_BROKER_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      redis:
        condition: service_started
    ports:
      - "9808:9808"
    restart: unless-stopped

  # ───────────────────────────── Redis Exporter（9121）
  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    command:
      - "--redis.addr=redis://default:${REDIS_PASSWORD}@redis:6379"
    depends_on:
      redis:
        condition: service_started
    ports:
      - "9121:9121"
    restart: unless-stopped

# ───────────────────────────── Secrets & Volumes
secrets:
  redis_pwd:
    file: ./ops/redis_pwd.txt

volumes:
  dsl_data:
  checkpoints_data:

    # ───────────────────────────── テストコマンド
    # 設定検証:
    #   docker compose -f docker-compose.yml -f docker-compose.override.yml config
    # ビルド＆起動:
    #   docker compose -f docker-compose.yml -f docker-compose.override.yml up -d --build
