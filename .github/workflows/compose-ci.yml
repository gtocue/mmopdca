###############################################################################
# docker/compose.ci.yml  ―  GitHub Actions／CI 用 Compose スタック定義
###############################################################################
#  ◆ ASSIST_KEY: このファイルは【docker/compose.ci.yml】に配置します
# ---------------------------------------------------------------------------
# 【ユニット名】          compose-ci-stack
# 【主な機能・責務】      ─ GitHub Actions 上で “最小限の統合テスト環境” を構築  
#                        ─ API・Worker・Beat が Web/Redis/Postgres に接続できるか
#                        ─ Prometheus / Exporters が 200 OK を返すか
#
# 【主な役割】
#   - FastAPI (api) の起動確認（port 8001 /docs で 200）
#   - Celery worker & beat のブート確認
#   - Redis / Postgres のコンテナ起動 & ヘルスチェック
#   - Prometheus + redis-exporter + celery-exporter のメトリクス疎通
#
# 【連携先・依存関係】
#   - docker/compose.core.yml（開発本番共通）
#   - docker/compose.db.yml   （永続 DB / Redis）
#   - .github/workflows/ci.yml（CI ワークフロー本体）
#
# 【ルール遵守メモ】
#   1) **version:** は省略し、Compose v3+ 自動判定
#   2) CI では永続 Volume を持たず、速度優先で tmpfs を使用
#   3) メトリクス Exporter は CE_BROKER_URL のみ使用
#   4) 追加機能のみ実装・既存サービスを壊さない
#
# ---------------------------------------------------------------------------
# NOTE:
#   - GitHub Actions ランナーは root で動くためパーミッション調整は省略
#   - ボリュームを tmpfs 化 → restore-cache で高速化する案も検討余地 (#46)
###############################################################################

services:

  ##########################################################################
  # FastAPI (Unit テスト／Smoke テストの対象)
  ##########################################################################
  api:
    build:
      context: ..
      dockerfile: Dockerfile.main_api
    command: >
      python -m uvicorn api.main_api:app
             --host 0.0.0.0 --port 8001 --proxy-headers
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: /mnt/data/dsl
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
    depends_on:
      db:     { condition: service_healthy }
      redis:  { condition: service_started }
    ports:   [ "8001:8001" ]
    # tmpfs マウントで I/O を高速化（CI は永続要らず）
    tmpfs:
      - /mnt/data/dsl
      - /mnt/checkpoints
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8001/docs || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 12

  ##########################################################################
  # Celery Worker
  ##########################################################################
  worker:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    command: >
      celery -A core.celery_app:celery_app worker --loglevel=info
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: /mnt/data/dsl
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
    depends_on:
      redis: { condition: service_started }

  ##########################################################################
  # Celery Beat
  ##########################################################################
  beat:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    command: >
      celery -A core.celery_app:celery_app
             beat --loglevel=info
             --schedule=/mnt/checkpoints/celerybeat-schedule
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: /mnt/data/dsl
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
    depends_on:
      redis: { condition: service_started }

  ##########################################################################
  # Redis  (Broker)
  ##########################################################################
  redis:
    image: redis:7-alpine
    command: >
      redis-server --requirepass ${REDIS_PASSWORD}
                   --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  ##########################################################################
  # PostgreSQL（マイグレ未テストでも起動確認だけ）
  ##########################################################################
  db:
    image: postgres:16-alpine
    env_file: [ ../.env ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  ##########################################################################
  # Exporters & Prometheus
  ##########################################################################
  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    command:
      - "--redis.addr=redis://default:${REDIS_PASSWORD_ENC}@redis:6379"
    depends_on:
      redis: { condition: service_started }
    ports: [ "9121:9121" ]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9121/metrics"]
      interval: 5s
      timeout: 3s
      retries: 12

  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    environment:
      CE_BROKER_URL: redis://default:${REDIS_PASSWORD_ENC}@redis:6379/0
      CE_PORT: 9808
    ports: [ "9808:9808" ]
    depends_on:
      redis: { condition: service_started }
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9808/metrics"]
      interval: 5s
      timeout: 3s
      retries: 12

  prom:
    image: prom/prometheus:v2.52.0
    command:
      - --web.enable-lifecycle
      - --storage.tsdb.retention.time=24h
    volumes:
      # 最小ルールセットのみ同梱
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      redis-exporter:   { condition: service_started }
      celery-exporter:  { condition: service_started }
    ports: [ "9090:9090" ]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 5s
      timeout: 3s
      retries: 12

###############################################################################
# CI 向けなので永続ボリュームは定義しない（GitHub ランナーは毎回クリーン）
###############################################################################
