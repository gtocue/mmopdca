# .github/workflows/ci.yml
# -------------------------------------------------------------------------
# Name:       CI (Poetry + E2E)
# Summary:    1) Poetry で依存管理 → Ruff で Lint → pytest でユニットテスト
#             2) Docker イメージをビルド＆GHCR にプッシュ
#             3) フルスタック起動 → E2E テスト実行
# -------------------------------------------------------------------------
name: CI (Poetry + E2E)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # ──────────────────────────────────────────
  # 1) Lint & ユニットテスト
  # ──────────────────────────────────────────
  test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Python をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Poetry & pip キャッシュ
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Poetry をインストール
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: 依存関係をインストール
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Lint (Ruff)
        run: poetry run ruff .

      - name: Unit tests (pytest)
        run: poetry run pytest --maxfail=1 --disable-warnings -v


  # ──────────────────────────────────────────
  # 2) Docker イメージのビルド＆プッシュ
  # ──────────────────────────────────────────
  build-and-push:
    name: Build & Push Docker Images
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - component: api
            dockerfile: docker/Dockerfile.main_api
            target: ''
          - component: worker
            dockerfile: docker/Dockerfile
            target: runtime
          - component: beat
            dockerfile: docker/Dockerfile
            target: runtime

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Docker Buildx をセットアップ
        uses: docker/setup-buildx-action@v3

      - name: GHCR にログイン
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}:${{ matrix.component }}-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}:${{ matrix.component }}-${{ github.sha }}


  # ──────────────────────────────────────────
  # 3) フルスタック起動 → E2E テスト
  # ──────────────────────────────────────────
  e2e:
    name: E2E テスト
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: CI 用 .env ファイルを作成
        run: |
          cat > .env <<EOF
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_RAW }}
          REDIS_PASSWORD_ENC=${{ secrets.REDIS_PASSWORD_URL }}
          POSTGRES_DB=mmopdca
          POSTGRES_USER=mmop_user
          POSTGRES_PASSWORD=${{ secrets.PG_PASSWORD }}
          DSL_ROOT=/mnt/data/dsl
          LOG_LEVEL=INFO
          TZ=UTC
          # Celery を同期実行モードに切り替え
          CELERY_TASK_ALWAYS_EAGER=true
          CELERY_TASK_EAGER_PROPAGATES=true
          EOF

      - name: Docker Compose で CI スタックを起動
        run: |
          docker compose \
            --env-file .env \
            -f docker/compose.ci.yml \
            up -d --build

      - name: サービスのヘルスチェック待機
        run: |
          set -euo pipefail
          echo "⏳ Waiting for services..."
          for port in 8001 9090 9121 9808; do
            echo "⏳ Checking port $port"
            for i in $(seq 1 30); do
              if [ "$port" -eq 8001 ]; then
                url="http://localhost:${port}/docs"
              else
                url="http://localhost:${port}"
              fi
              if curl -fsSL "$url" > /dev/null; then
                echo "✅ Service healthy at $url"
                break
              fi
              sleep 4
              if [ "$i" -eq 30 ]; then
                echo "❌ Service on port $port did not become healthy"
                docker compose logs --tail=50
                exit 1
              fi
            done
          done

      - name: E2E テスト用 依存関係をインストール
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run E2E tests
        run: poetry run pytest tests/it --maxfail=1 --disable-warnings -v

      - name: Docker Compose down
        if: always()
        run: |
          docker compose \
            --env-file .env \
            -f docker/compose.ci.yml \
            down -v --remove-orphans
