# -------------------------------------------------------------------------
# Name:       CI (Poetry)
# Summary:    Poetry で依存管理 → Ruff で Lint → Pytest でユニットテスト →
#             Docker イメージをビルド＆GHCR にプッシュするワークフロー
# -------------------------------------------------------------------------
name: CI (Poetry)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Dockerイメージのレジストリ＆ベース名設定
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}   # ghcr.io/<owner>/<repo>
  PYTHON_VERSION: '3.11'

jobs:
  # ──────────────────────────────────────────
  # 1) Lint & ユニットテスト
  # ──────────────────────────────────────────
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout コード
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Poetry と pip キャッシュ
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Poetry をインストール
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: 依存パッケージを Poetry でインストール
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Lint（Ruff）
        run: |
          poetry run ruff check .

      - name: ユニットテスト（pytest）
        run: |
          poetry run pytest --maxfail=1 --disable-warnings -v

  # ──────────────────────────────────────────
  # 2) Docker イメージのビルド＆プッシュ
  # ──────────────────────────────────────────
  build-and-push:
    name: Build & Push Docker Images
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - component: api
            dockerfile: docker/Dockerfile.main_api
            target: ''       # FastAPI はマルチステージターゲット不要
          - component: worker
            dockerfile: docker/Dockerfile
            target: runtime  # Celery Worker
          - component: beat
            dockerfile: docker/Dockerfile
            target: runtime  # Celery Beat

    steps:
      - name: Checkout コード
        uses: actions/checkout@v4

      - name: Docker Buildx セットアップ
        uses: docker/setup-buildx-action@v3

      - name: GHCR にログイン
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}:${{ matrix.component }}-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}:${{ matrix.component }}-${{ github.sha }}
