# .github/workflows/ci.yml
name: CI - compose up & healthcheck

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  compose-up-test:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      # 0) リポジトリをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Docker Buildx をセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2) docker compose のバージョン確認
      - name: Compose version
        run: docker compose version

      # 3) CI 用の .env ファイルを生成
      - name: Create .env for CI
        run: |
          cat > .env <<'EOF'
          REDIS_PASSWORD=ci_test_pass
          REDIS_PASSWORD_ENC=ci_test_pass
          POSTGRES_DB=mmopdca
          POSTGRES_USER=mmop_user
          POSTGRES_PASSWORD=PgPass
          DSL_ROOT=/mnt/data/dsl
          LOG_LEVEL=INFO
          TZ=UTC
          EOF

      # 4) Docker スタックをビルド＆起動
      - name: Compose up -d
        run: |
          docker compose \
            -f docker/compose.core.yml \
            -f docker/compose.db.yml   \
            -f docker/compose.ports.yml \
            up -d --build

      # 5) 各サービスのエンドポイントが 200 を返すまで待機
      - name: Wait for services
        run: |
          endpoints=("8001/docs" "9090" "9121/metrics" "9808/metrics")
          for ep in "${endpoints[@]}"; do
            echo "🔍 Health-check http://localhost:${ep}"
            for i in {1..30}; do
              status=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:${ep} || true)
              if [ "$status" = "200" ]; then
                echo "✅ $ep  returned 200 OK"
                break
              fi
              sleep 2
              if [ "$i" = "30" ]; then
                echo "❌ $ep did not return 200 within timeout"
                docker compose logs --tail=50
                exit 1
              fi
            done
          done

      # 6) テスト完了後にクリーンアップ
      - name: Compose down
        if: always()
        run: |
          docker compose \
            -f docker/compose.core.yml \
            -f docker/compose.db.yml   \
            -f docker/compose.ports.yml \
            down -v --remove-orphans
