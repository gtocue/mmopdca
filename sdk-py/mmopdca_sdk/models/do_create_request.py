# coding: utf-8

"""
    mmopdca API

    Command-DSL-driven forecasting micro-service API only

    The version of the OpenAPI document: 0.4.0
    Contact: gtocue510@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from mmopdca_sdk.models.indicator_param import IndicatorParam
from typing import Optional, Set
from typing_extensions import Self

class DoCreateRequest(BaseModel):
    """
    Do フェーズ実行リクエスト。  すべて **任意**。未指定項目は対応する Plan の値を継承する。
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    start: Optional[date] = None
    end: Optional[date] = None
    indicators: Optional[Annotated[List[IndicatorParam], Field(min_length=0)]] = None
    run_no: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    seq: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    run_tag: Optional[Annotated[str, Field(strict=True, max_length=32)]] = None
    __properties: ClassVar[List[str]] = ["symbol", "start", "end", "indicators", "run_no", "seq", "run_tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in indicators (list)
        _items = []
        if self.indicators:
            for _item_indicators in self.indicators:
                if _item_indicators:
                    _items.append(_item_indicators.to_dict())
            _dict['indicators'] = _items
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if start (nullable) is None
        # and model_fields_set contains the field
        if self.start is None and "start" in self.model_fields_set:
            _dict['start'] = None

        # set to None if end (nullable) is None
        # and model_fields_set contains the field
        if self.end is None and "end" in self.model_fields_set:
            _dict['end'] = None

        # set to None if indicators (nullable) is None
        # and model_fields_set contains the field
        if self.indicators is None and "indicators" in self.model_fields_set:
            _dict['indicators'] = None

        # set to None if run_no (nullable) is None
        # and model_fields_set contains the field
        if self.run_no is None and "run_no" in self.model_fields_set:
            _dict['run_no'] = None

        # set to None if seq (nullable) is None
        # and model_fields_set contains the field
        if self.seq is None and "seq" in self.model_fields_set:
            _dict['seq'] = None

        # set to None if run_tag (nullable) is None
        # and model_fields_set contains the field
        if self.run_tag is None and "run_tag" in self.model_fields_set:
            _dict['run_tag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "indicators": [IndicatorParam.from_dict(_item) for _item in obj["indicators"]] if obj.get("indicators") is not None else None,
            "run_no": obj.get("run_no"),
            "seq": obj.get("seq"),
            "run_tag": obj.get("run_tag")
        })
        return _obj


