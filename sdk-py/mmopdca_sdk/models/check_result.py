# coding: utf-8

"""
mmopdca API

Command-DSL-driven forecasting micro-service API only

The version of the OpenAPI document: 0.4.0
Contact: gtocue510@gmail.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr
from mmopdca_sdk.pydantic_compat import ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from mmopdca_sdk.models.report import Report
from typing import Optional, Set
from typing_extensions import Self


class CheckResult(BaseModel):
    """
    /check エンドポイントのレスポンス & ストレージフォーマット report はタスク未完了時に None を返すケースを考慮
    """  # noqa: E501

    id: StrictStr = Field(description="check-xxxx 形式の一意 ID")
    do_id: StrictStr = Field(description="評価対象の Do ID")
    created_at: datetime = Field(description="UTC ISO8601")
    report: Optional[Report] = None
    __properties: ClassVar[List[str]] = ["id", "do_id", "created_at", "report"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of report
        if self.report:
            _dict["report"] = self.report.to_dict()
        # set to None if report (nullable) is None
        # and model_fields_set contains the field
        if self.report is None and "report" in self.model_fields_set:
            _dict["report"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "do_id": obj.get("do_id"),
                "created_at": obj.get("created_at"),
                "report": (
                    Report.from_dict(obj["report"])
                    if obj.get("report") is not None
                    else None
                ),
            }
        )
        return _obj
