# coding: utf-8

"""
mmopdca API

Command-DSL-driven forecasting micro-service API only

The version of the OpenAPI document: 0.4.0
Contact: gtocue510@gmail.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from mmopdca_sdk.models.do_status import DoStatus
from typing import Optional, Set
from typing_extensions import Self


class DoResponse(BaseModel):
    """
    Do ジョブの状態および結果レスポンス。  `status` 遷移: **PENDING → RUNNING → (DONE | FAILED)**
    """  # noqa: E501

    do_id: StrictStr = Field(description="Do 実行 ID (`do-xxxx` 形式)")
    plan_id: StrictStr = Field(description="紐づく Plan ID")
    seq: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="DoCreateRequest.run_no のエコーバック（互換: 'seq'）"
    )
    run_tag: Optional[StrictStr] = None
    status: DoStatus = Field(description="ジョブ状態")
    result: Optional[Dict[str, Any]] = None
    artifact_uri: Optional[StrictStr] = None
    dashboard_url: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=2083)]
    ] = None
    __properties: ClassVar[List[str]] = [
        "do_id",
        "plan_id",
        "seq",
        "run_tag",
        "status",
        "result",
        "artifact_uri",
        "dashboard_url",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if run_tag (nullable) is None
        # and model_fields_set contains the field
        if self.run_tag is None and "run_tag" in self.model_fields_set:
            _dict["run_tag"] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict["result"] = None

        # set to None if artifact_uri (nullable) is None
        # and model_fields_set contains the field
        if self.artifact_uri is None and "artifact_uri" in self.model_fields_set:
            _dict["artifact_uri"] = None

        # set to None if dashboard_url (nullable) is None
        # and model_fields_set contains the field
        if self.dashboard_url is None and "dashboard_url" in self.model_fields_set:
            _dict["dashboard_url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "do_id": obj.get("do_id"),
                "plan_id": obj.get("plan_id"),
                "seq": obj.get("seq"),
                "run_tag": obj.get("run_tag"),
                "status": obj.get("status"),
                "result": obj.get("result"),
                "artifact_uri": obj.get("artifact_uri"),
                "dashboard_url": obj.get("dashboard_url"),
            }
        )
        return _obj
