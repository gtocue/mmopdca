# =========================================================
# ASSIST_KEY: metrics/signal_catalog.yml
# =========================================================
#
# メトリクス／シグナル カタログ設定ファイル
#
# SLO（サービスレベル目標）を定義する各種メトリクスのシグナルをまとめています。
# Alertmanager やダッシュボード（Grafana）で参照するための YAML フォーマットです。
#
# シグナル定義フォーマット:
#   <key>:
#     expr: |        # PromQL 式
#     unit:          # 単位 (percent / seconds / ops/s / count など)
#     slo:           # SLO 目標値 (数値 or null)
#     class:         # クラス (S=Critical, A=Important)
#
# ---------------------------------------------------------

# --------------------------------------------------------
# Celery / Flower 関連メトリクス (クラス: SLO＝Critical)
# --------------------------------------------------------

task_success_rate:
  expr: |
    100 * rate(celery_task_succeeded_total[1m]) /
    clamp_min(
      rate(celery_task_succeeded_total[1m]) +
      rate(celery_task_failure_total[1m]),
      1
    )
  unit: percent
  slo: 99
  class: S

task_failed_per_min:
  expr: rate(celery_task_failure_total[1m]) * 60
  unit: ops/min
  slo: 0
  class: S

online_workers:
  expr: sum(flower_worker_online)
  unit: count
  slo: 1
  class: S

celery_queue_length:
  expr: sum(celery_queue_length)
  unit: count
  slo: 1000
  class: S

# --------------------------------------------------------
# Celery / Flower 関連メトリクス (クラス: A＝Important)
# --------------------------------------------------------

task_runtime_p95:
  expr: |
    histogram_quantile(
      0.95,
      rate(celery_task_runtime_seconds_bucket[5m])
    )
  unit: seconds
  slo: 2
  class: A

# --------------------------------------------------------
# HTTP/API / Nginx 関連メトリクス
# --------------------------------------------------------

http_request_duration_p95:
  expr: |
    histogram_quantile(
      0.95,
      rate(http_request_duration_seconds_bucket[5m])
    )
  unit: seconds
  slo: 0.5
  class: S

http_5xx_rate:
  expr: rate(http_requests_total{status=~"5.."}[1m])
  unit: ops/s
  slo: 0
  class: S

http_rps:
  expr: rate(http_requests_total[1m])
  unit: ops/s
  slo: null
  class: A

# --------------------------------------------------------
# Redis 関連メトリクス
# --------------------------------------------------------

redis_memory_utilization:
  expr: redis_memory_used_bytes / redis_config_maxmemory_bytes
  unit: percent
  slo: 0.9
  class: A

redis_connected_clients:
  expr: redis_connected_clients
  unit: count
  slo: null
  class: A

# --------------------------------------------------------
# PostgreSQL 関連メトリクス
# --------------------------------------------------------

postgres_active_connections:
  expr: pg_stat_database_numbackends{datname!~"template.*"}
  unit: count
  slo: null
  class: A

# --------------------------------------------------------
# Node / Host 関連メトリクス
# --------------------------------------------------------

node_cpu_usage:
  expr: 100 - avg(irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100
  unit: percent
  slo: 85
  class: S

node_memory_usage:
  expr: |
    100 * (
      1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)
    )
  unit: percent
  slo: 90
  class: S

node_disk_io_wait:
  expr: avg(irate(node_disk_io_time_seconds_total[5m]))
  unit: seconds
  slo: null
  class: A
