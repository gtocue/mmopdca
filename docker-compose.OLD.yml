###############################################################################
# docker-compose.yml ― mmopdca “本番相当” 定義（2025-05-05  FINAL）
#
# ❶ .env に必ず置く変数
#       REDIS_PASSWORD      = WB/9qvLd9ES71o4ynPBmBA==
#       REDIS_PASSWORD_ENC  = WB%2F9qvLd9ES71o4ynPBmBA%3D%3D   # URL-エンコード
###############################################################################
version: "3.9"

# ── 共通 Environment 定義（YAML アンカー）
x-common-env: &default_env
  DSL_ROOT: /mnt/data/dsl
  CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
  CELERY_RESULT_BACKEND: redis://default:${REDIS_PASSWORD}@redis:6379/0

###############################################################################
services:
  #############################################################################

  # ───────────────────────────── API (FastAPI + Uvicorn)
  api:
    build: { context: ".", dockerfile: Dockerfile.main_api }
    user: "1000:1000"
    env_file: .env
    environment: *default_env
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command: >
      python -m uvicorn api.main_api:app
             --host 0.0.0.0 --port 8001 --proxy-headers
    volumes: [ dsl_data:/mnt/data/dsl ]
    ports: [ "8001:8001" ]
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Celery Worker
  worker:
    build: { context: ".", dockerfile: Dockerfile, target: runtime }
    user: "1000:1000"
    env_file: .env
    environment: *default_env
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command: >
      celery -A core.celery_app:celery_app
             worker --loglevel=info
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: on-failure

  # ───────────────────────────── Celery Beat
  beat:
    build: { context: ".", dockerfile: Dockerfile, target: runtime }
    user: "1000:1000"
    env_file: .env
    environment: *default_env
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command: >
      celery -A core.celery_app:celery_app
             beat --loglevel=info
             --schedule=/mnt/checkpoints/celerybeat-schedule
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: on-failure

  # ───────────────────────────── Redis
  redis:
    image: redis:7-alpine
    command: >
      redis-server --requirepass ${REDIS_PASSWORD}
                   --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes: [ redis_data:/data ]
    restart: unless-stopped

  # ───────────────────────────── PostgreSQL
  db:
    image: postgres:16-alpine
    env_file: .env
    volumes: [ pg_data:/var/lib/postgresql/data ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ───────────────────────────── Flower
  flower:
    image: mher/flower:1.2
    env_file: .env
    environment:
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Prometheus
  prom:
    image: prom/prometheus:v2.52.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=14d
    volumes:
      - ./prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prom/rules_mmopdca.yml:/etc/prometheus/rules_mmopdca.yml:ro
      - prom_data:/prometheus
    depends_on:
      flower: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Grafana
  grafana:
    image: grafana/grafana-oss:10.4.2
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prom: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Celery Exporter  (→ :9808/metrics)
  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    env_file: .env
    # entrypoint はデフォルトのまま（= celery-exporter）
    command:
      - --broker-url=redis://default:${REDIS_PASSWORD_ENC}@redis:6379/0
      - --port=9808
      - --log-level=info
    depends_on:
      redis: { condition: service_started }
    ports: [ "9808:9808" ]
    restart: unless-stopped

  # ───────────────────────────── Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    env_file: .env
    command:
      - --redis.addr=redis://default:${REDIS_PASSWORD_ENC}@redis:6379
    ports: [ "9121:9121" ]
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Nginx  (Edge / 443 only)
  nginx:
    image: nginx:1.27-alpine
    container_name: mmopdca-nginx
    ports: [ "443:443" ]
    volumes:
      - ./ops/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/cert.pem:/etc/nginx/cert.pem:ro
      - ./ops/key.pem:/etc/nginx/key.pem:ro
    depends_on:
      api: { condition: service_started }
      grafana:{ condition: service_started }
    restart: unless-stopped

###############################################################################
# 永続ボリューム
###############################################################################
volumes:
  dsl_data:
  checkpoints_data:
  pg_data:
  redis_data:
  prom_data:
  grafana_data:
