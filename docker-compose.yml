# ------------------------------------------------------------------
# docker-compose.yml – すべてのサービスを一括起動
#   $ docker compose up -d
# ------------------------------------------------------------------
version: "3.8" # Compose v2 でも互換性を保つ無難なバージョン

services:
  # -------------------------------------------------------------- #
  # FastAPI / Uvicorn                                              #
  # -------------------------------------------------------------- #
  api:
    build:
      context: .
      dockerfile: Dockerfile.main_api # FastAPI 用イメージ
    container_name: mmopdca_api
    command:
      - uvicorn
      - api.main_api:app
      - --host=0.0.0.0
      - --port=8001
      - --proxy-headers
    env_file: .env
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy # ← DB 起動完了を待つ
      redis:
        condition: service_started
    restart: unless-stopped

  # -------------------------------------------------------------- #
  # Celery Worker                                                  #
  # -------------------------------------------------------------- #
  worker:
    build:
      context: .
      dockerfile: Dockerfile # Worker/Beat 共通
      target: runtime
    container_name: mmopdca_worker
    command:
      - celery
      - -A
      - core.celery_app:celery_app # Celery アプリを明示
      - worker
      - --loglevel=info
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure

  # -------------------------------------------------------------- #
  # Celery Beat – スケジューラ                                     #
  # -------------------------------------------------------------- #
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mmopdca_beat
    command:
      - celery
      - -A
      - core.celery_app:celery_app
      - beat
      - --loglevel=info
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure

  # -------------------------------------------------------------- #
  # Redis – Celery ブローカー / リザルトバックエンド               #
  # -------------------------------------------------------------- #
  redis:
    image: redis:7-alpine
    container_name: mmopdca_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped

  # -------------------------------------------------------------- #
  # PostgreSQL                                                     #
  # -------------------------------------------------------------- #
  db:
    image: postgres:16-alpine
    container_name: mmopdca_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      # ← API/Worker が待機するヘルスチェック
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # -------------------------------------------------------------- #
  # pgAdmin – dev profile だけで起動                                #
  # -------------------------------------------------------------- #
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mmopdca_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    profiles: [ "dev" ] # `--profile dev` でのみ起動

# ------------------------------------------------------------------
volumes:
  pg_data:
  redis_data:
  pgadmin_data:
