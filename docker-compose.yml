version: "3.9"

services:
  # ───────────────────────────── API
  api:
    build:
      context: .
      dockerfile: Dockerfile.main_api
    env_file: .env
    environment:
      DSL_ROOT: /mnt/data/dsl
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
    ports:
      - "8001:8001"
    volumes:
      - dsl_data:/mnt/data/dsl
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    env_file: .env
    environment:
      DSL_ROOT: /mnt/data/dsl
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
    user: "1000:1000"
    command: [ "celery", "-A", "core.celery_app:celery_app", "worker", "--loglevel=info" ]
    volumes:
      - checkpoints_data:/mnt/checkpoints
      - dsl_data:/mnt/data/dsl
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: on-failure

  # ───────────────────────────── Beat   ← ★ ボリュームを 1 行追加
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    env_file: .env
    environment:
      DSL_ROOT: /mnt/data/dsl
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
    user: "1000:1000"
    command:
      - "celery"
      - "-A"
      - "core.celery_app:celery_app"
      - "beat"
      - "--loglevel=info"
      - "--schedule=/mnt/checkpoints/celerybeat-schedule"
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints # ← これがないと Permission denied
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: on-failure

  # ───────────────────────────── Redis (内部のみ)
  redis:
    image: redis:7-alpine
    ports: [] # 外部公開しない
    volumes:
      - redis_data:/data
    command:
      - redis-server
      - "--requirepass"
      - "${REDIS_PASSWORD}"
      - "--maxmemory"
      - "256mb"
      - "--maxmemory-policy"
      - "allkeys-lru"
    restart: unless-stopped

  # ───────────────────────────── Postgres (内部のみ)
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports: [] # 外部公開しない
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ───────────────────────────── Flower (内部のみ)
  flower:
    image: mher/flower:1.2
    environment:
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
    ports: [] # 外部公開しない
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Prometheus (内部のみ)
  prom:
    image: prom/prometheus:v2.52.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=14d"
    volumes:
      - ./prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prom/rules_mmopdca.yml:/etc/prometheus/rules_mmopdca.yml:ro
      - prom_data:/prometheus
    ports: [] # 外部公開しない
    depends_on:
      flower: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Grafana (内部のみ)
  grafana:
    image: grafana/grafana-oss:10.4.2
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports: [] # 外部公開しない
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prom: { condition: service_started }
    restart: unless-stopped

  # ───────────────────────────── Nginx (edge only)
  nginx:
    image: nginx:1.27-alpine
    container_name: mmopdca-nginx
    ports:
      - "443:443" # 443 だけ外へ
    volumes:
      - ./ops/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/cert.pem:/etc/nginx/cert.pem:ro
      - ./ops/key.pem:/etc/nginx/key.pem:ro
    depends_on:
      - api
      - grafana
    restart: unless-stopped

# ──────────────────────────── 永続ボリューム
volumes:
  dsl_data:
  pg_data:
  redis_data:
  prom_data:
  grafana_data:
  checkpoints_data:
