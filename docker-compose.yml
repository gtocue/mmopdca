###############################################################################
# docker-compose.yml ― mmopdca + Flower 監視 (PowerShell Edition)
# ※ Docker Compose v2/v3 では `version:` 属性は不要かつ非推奨です。
###############################################################################
services:
  # ---------------------------------------------------------------- API / Worker / Beat
  api:
    build:
      context: .
      dockerfile: Dockerfile.main_api
    command: uvicorn api.main_api:app --host 0.0.0.0 --port 8001 --proxy-headers
    env_file: .env
    environment:
      # Celery 用 Broker & Result Backend を Redis コンテナへ向ける
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: celery -A core.celery_app:celery_app worker --loglevel=info
    env_file: .env
    environment:
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    user: "1000:1000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - checkpoints_data:/mnt/checkpoints
    restart: on-failure

  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: celery -A core.celery_app:celery_app beat --loglevel=info
    env_file: .env
    environment:
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    user: "1000:1000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure

  # ---------------------------------------------------------------- Infra
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ---------------------------------------------------------------- Flower (UI + /metrics)
  flower:
    image: mher/flower:1.2
    command: >
      celery flower
        --broker=${CELERY_BROKER_URL:-redis://redis:6379/0}
        --port=5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped

  # ---------------------------------------------------------------- Prometheus / Grafana (optional)
  prom:
    image: prom/prometheus:v2.52.0
    volumes:
      - ./prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=14d"
    ports:
      - "9090:9090"
    depends_on:
      flower:
        condition: service_started
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.4.2
    profiles:
      - dev
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      prom:
        condition: service_started
    restart: unless-stopped

volumes:
  pg_data:
  redis_data:
  checkpoints_data:
  prom_data:
  grafana_data:
