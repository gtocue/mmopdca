###############################################################################
# docker-compose.yml  ‚Äì  mmopdca All-in-One Stack
#   * API  : FastAPI + Uvicorn („Éù„Éº„Éà 8001)
#   * Redis: Celery broker / backend
#   * DB   : PostgreSQL 16-alpine
#   * Worker / Beat : Celery „É©„É≥„Çø„Ç§„É†ÔºàÈùû root „ÅßËµ∑ÂãïÔºâ
###############################################################################

services:
  # --------------------------------------------------------------------------- #
  # FastAPI / Uvicorn  ‚Äï REST Front
  # --------------------------------------------------------------------------- #
  api:
    build:
      context: .
      dockerfile: Dockerfile.main_api
    container_name: mmopdca_api
    command: >
      uvicorn api.main_api:app --host=0.0.0.0 --port=8001 --proxy-headers
    env_file: .env
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  # --------------------------------------------------------------------------- #
  # Celery Worker  ‚Äï Ëß£Êûê„Ç∏„Éß„Éñ (‚ºøÂãï scale ÂØæË±°)
  # --------------------------------------------------------------------------- #
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: >
      celery -A core.celery_app:celery_app worker --loglevel=info
    user: "1000:1000" # üÜï Èùû root ÂÆüË°å
    env_file: .env
    environment:
      ONSPOT_INSTANCE: "${ONSPOT_INSTANCE:-false}"
      CHECKPOINT_DIR: /mnt/checkpoints
    volumes:
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure

  # --------------------------------------------------------------------------- #
  # Celery Beat  ‚Äï  ÂÆöÊúü„Çπ„Ç±„Ç∏„É•„Éº„É©
  # --------------------------------------------------------------------------- #
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: >
      celery -A core.celery_app:celery_app beat --loglevel=info
    user: "1000:1000" # üÜï Èùû root ÂÆüË°å
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure

  # --------------------------------------------------------------------------- #
  # Redis  ‚Äì Celery broker / result-backend
  # --------------------------------------------------------------------------- #
  redis:
    image: redis:7-alpine
    container_name: mmopdca_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # --------------------------------------------------------------------------- #
  # PostgreSQL
  # --------------------------------------------------------------------------- #
  db:
    image: postgres:16-alpine
    container_name: mmopdca_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # --------------------------------------------------------------------------- #
  # pgAdmin  ‚Äï ÈñãÁô∫ÊôÇ„ÅÆ„Åø (docker compose --profile dev up -d)
  # --------------------------------------------------------------------------- #
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mmopdca_pgadmin
    profiles: [ dev ]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

###############################################################################
# Named volumes  ‚Äì Ê∞∏Á∂ö„Éá„Éº„Çø
###############################################################################
volumes:
  pg_data:
  redis_data:
  checkpoints_data:
  pgadmin_data:
