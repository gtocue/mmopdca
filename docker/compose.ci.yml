# ----------------------------------------------------------------------
# File: docker/compose.ci.yml
# Name: CI 用 Docker スタック定義（Eager モード版）
# Summary:
#   - API コンテナのみを Eager モードにして同期実行
#   - worker/beat コンテナは CI では不要なので除去
# ----------------------------------------------------------------------
version: "3.9"

networks:
  default:
    name: docker_cicd_default

volumes:
  pg_data:


services:

  ########################################################################
  # FastAPI (API サーバー) - Eager モードでタスクを同期実行
  ########################################################################
  api:
    build:
      context: ..
      dockerfile: Dockerfile.main_api
    command: >
      python -m uvicorn api.main_api:app --host 0.0.0.0 --port 8001 --proxy-headers
    env_file:
      - ../.env
    environment:
      CELERY_TASK_ALWAYS_EAGER: "true"
      CELERY_TASK_EAGER_PROPAGATES: "true"
    tmpfs:
      - /mnt/data/dsl
      - /mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8001/docs || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 12
    networks:
      - default

  ########################################################################
  # Redis (Broker)
  ########################################################################
  redis:
    image: redis:7-alpine
    env_file:
      - ../.env
    command: >
      redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - default
    volumes:
      - redis_data:/data

  ########################################################################
  # PostgreSQL
  ########################################################################
  db:
    image: postgres:16-alpine
    env_file:
      - ../.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - default
    volumes:
      - pg_data:/var/lib/postgresql/data

  ########################################################################
  # Redis-Exporter（オプション）
  ########################################################################
  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    env_file:
      - ../.env
    command:
      - "--redis.addr=redis://:${REDIS_PASSWORD}@redis:6379/0"
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "9121:9121"
    healthcheck:
      test: [ "CMD", "curl -f http://localhost:9121/metrics" ]
      interval: 5s
      timeout: 3s
      retries: 12
    networks:
      - default

  ########################################################################
  # Celery-Exporter（オプション）
  ########################################################################
  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    env_file:
      - ../.env
    environment:
      CE_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      CE_PORT: "9808"
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "9808:9808"
    healthcheck:
      test: [ "CMD", "curl -f http://localhost:9808/metrics" ]
      interval: 5s
      timeout: 3s
      retries: 12
    networks:
      - default

  ########################################################################
  # Prometheus（オプション）
  ########################################################################
  prom:
    image: prom/prometheus:v2.52.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=24h
      - --web.enable-lifecycle
    volumes:
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      redis-exporter:
        condition: service_healthy
      celery-exporter:
        condition: service_healthy
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "curl -f http://localhost:9090/-/ready" ]
      interval: 5s
      timeout: 3s
      retries: 12
    networks:
      - default
