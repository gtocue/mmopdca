# -----------------------------------------------------------------------------
# File:      docker/compose.ci.yml
# Summary:   CI 用 Docker スタック（FastAPI, Celery, Redis, PostgreSQL,
#            Exporters, Prometheus）を一発で立ち上げるための Compose 定義
# -----------------------------------------------------------------------------
services:

  ########################################################################
  # FastAPI (API サーバー)
  ########################################################################
  api:
    build:
      context: ..
      dockerfile: Dockerfile.main_api
    command: >
      python -m uvicorn api.main_api:app --host 0.0.0.0 --port 8001 --proxy-headers
    env_file: [ ../.env ]
    tmpfs:
      - /mnt/data/dsl
      - /mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8001:8001"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8001/docs || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 12

  ########################################################################
  # Celery Worker & Beat
  ########################################################################
  worker:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    command: celery -A core.celery_app:celery_app worker --loglevel=info
    env_file: [ ../.env ]
    depends_on:
      redis:
        condition: service_started

  beat:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    command: >
      celery -A core.celery_app:celery_app beat --loglevel=info --schedule=/mnt/checkpoints/celerybeat-schedule
    env_file: [ ../.env ]
    depends_on:
      redis:
        condition: service_started

  ########################################################################
  # Redis (Broker)
  ########################################################################
  redis:
    image: redis:7-alpine
    command: >
      redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10

  ########################################################################
  # PostgreSQL
  ########################################################################
  db:
    image: postgres:16-alpine
    env_file: [ ../.env ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 10

  ########################################################################
  # Redis-Exporter
  ########################################################################
  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    env_file: [ ../.env ]
    command:
      - "--redis.addr=redis://default:${REDIS_PASSWORD}@redis:6379"
    depends_on:
      redis:
        condition: service_started
    ports:
      - "9121:9121"
    healthcheck:
      test: [ "CMD", "curl -f http://localhost:9121/metrics" ]
      interval: 5s
      timeout: 3s
      retries: 12

  ########################################################################
  # Celery-Exporter
  ########################################################################
  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    env_file: [ ../.env ]
    environment:
      CE_BROKER_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      CE_PORT: 9808
    depends_on:
      redis:
        condition: service_started
    ports:
      - "9808:9808"
    healthcheck:
      test: [ "CMD", "curl -f http://localhost:9808/metrics" ]
      interval: 5s
      timeout: 3s
      retries: 12

  ########################################################################
  # Prometheus
  ########################################################################
  prom:
    image: prom/prometheus:v2.52.0
    # 既存の entrypoint は /bin/prometheus なので、command はフラグだけ！
    command:
      - --config.file=/etc/prometheus/prometheus.yml # ← 追加
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=24h
      - --web.enable-lifecycle
    volumes:
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # （オプション）TSDB データ用に永続化ボリュームを切るなら
      # - prom-data:/prometheus
    depends_on:
      redis-exporter:
        condition: service_started
      celery-exporter:
        condition: service_started
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "curl -f http://localhost:9090/-/ready" ]
      interval: 5s
      timeout: 3s
      retries: 12

# -----------------------------------------------------------------------------
# （オプション）TSDB 永続化を使う場合
# -----------------------------------------------------------------------------
# volumes:
#   prom-data:
