# docker/compose.core.yml
version: "3.9"

###############################################################################
# すべてのサービスで .env を読み込み、ここで必要な環境変数だけ直書きします
#   ・共通アンカーは完全に廃止
#   ・ports は別ファイル（compose.ports.yml 等）で開閉を管理
###############################################################################

services:
  ##########################################################################
  # FastAPI
  ##########################################################################
  api:
    build:
      context: ..
      dockerfile: Dockerfile.main_api
    user: "1000:1000"
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: ${DSL_ROOT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    entrypoint: [ /usr/local/bin/docker-entrypoint-init-dsl.sh ]
    command: >
      python -m uvicorn api.main_api:app
             --host 0.0.0.0 --port 8001 --proxy-headers
    volumes:
      - dsl_data:/mnt/data/dsl
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: unless-stopped

  ##########################################################################
  # Celery Worker
  ##########################################################################
  worker:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    user: "1000:1000"
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: ${DSL_ROOT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    entrypoint: [ /usr/local/bin/docker-entrypoint-init-dsl.sh ]
    command: >
      celery -A core.celery_app:celery_app worker --loglevel=info
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: on-failure

  ##########################################################################
  # Celery Beat
  ##########################################################################
  beat:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    user: "1000:1000"
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: ${DSL_ROOT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    entrypoint: [ /usr/local/bin/docker-entrypoint-init-dsl.sh ]
    command: >
      celery -A core.celery_app:celery_app
             beat --loglevel=info
             --schedule=/mnt/checkpoints/celerybeat-schedule
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
    restart: on-failure

  ##########################################################################
  # Redis
  ##########################################################################
  redis:
    image: redis:7-alpine
    command: >
      redis-server --requirepass ${REDIS_PASSWORD}
                   --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped

  ##########################################################################
  # PostgreSQL
  ##########################################################################
  db:
    image: postgres:16-alpine
    env_file: [ ../.env ]
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  ##########################################################################
  # Flower
  ##########################################################################
  flower:
    image: mher/flower:1.2
    env_file: [ ../.env ]
    environment:
      DSL_ROOT: ${DSL_ROOT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

  ##########################################################################
  # Prometheus
  ##########################################################################
  prom:
    image: prom/prometheus:v2.52.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=14d
    volumes:
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../prom/rules_mmopdca.yml:/etc/prometheus/rules_mmopdca.yml:ro
      - prom_data:/prometheus
    depends_on:
      flower: { condition: service_started }
    restart: unless-stopped

  ##########################################################################
  # Grafana
  ##########################################################################
  grafana:
    image: grafana/grafana-oss:10.4.2
    env_file: [ ../.env ]
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prom: { condition: service_started }
    restart: unless-stopped

  ##########################################################################
  # Exporters（ポートは別 compose で管理）
  ##########################################################################
  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    env_file: [ ../.env ]
    command:
      - --broker-url=redis://default:${REDIS_PASSWORD_ENC}@redis:6379/0
      - --port=9808
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    env_file: [ ../.env ]
    command:
      - --redis.addr=redis://default:${REDIS_PASSWORD_ENC}@redis:6379
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

###############################################################################
# 永続ボリューム
###############################################################################
volumes:
  dsl_data:
  checkpoints_data:
  redis_data:
  pg_data:
  prom_data:
  grafana_data:
