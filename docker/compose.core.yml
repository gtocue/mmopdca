###############################################################################
# docker/compose.core.yml ―― “全部入り” 決定版 2025-05-15  (AUTH fix-3)
###############################################################################
version: "3.9"

###################### 共通テンプレ ###########################################
x-env: &default-env
  env_file: [ ../.env ] # プロジェクトルート .env

x-retry: &retry
  interval: 10s
  timeout: 5s
  start_period: 20s
  retries: 5

###################### アプリケーション層 #####################################
services:
  api:
    build: { context: .., dockerfile: Dockerfile.main_api }
    user: "1000:1000"
    <<: *default-env
    environment: [ DSL_ROOT, CELERY_BROKER_URL, CELERY_RESULT_BACKEND ]
    entrypoint: [ /usr/local/bin/docker-entrypoint-init-dsl.sh ]
    command: >
      python -m uvicorn api.main_api:app --host 0.0.0.0 --port 8001 --proxy-headers
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ mmopdca_default ]
    restart: unless-stopped

  worker:
    build: { context: .., dockerfile: Dockerfile, target: runtime }
    user: "1000:1000"
    <<: *default-env
    environment: [ DSL_ROOT, CELERY_BROKER_URL, CELERY_RESULT_BACKEND ]
    entrypoint: [ /usr/local/bin/docker-entrypoint-init-dsl.sh ]
    command: >
      celery -A core.celery_app:celery_app worker --loglevel=info
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ mmopdca_default ]
    restart: on-failure

  beat:
    build: { context: .., dockerfile: Dockerfile, target: runtime }
    user: root
    <<: *default-env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL
      - CELERY_RESULT_BACKEND
      - DO_TOTAL_SHARDS
    entrypoint: [ /usr/local/bin/docker-entrypoint-init-dsl.sh ]
    command: >
      celery -A core.celery_app:celery_app beat --loglevel=info
             --schedule=/mnt/checkpoints/celerybeat-schedule
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ mmopdca_default ]
    restart: on-failure

  ###################### データストア ###########################################
  db:
    image: postgres:16-alpine
    <<: *default-env
    healthcheck:
      test: [ "CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      <<: *retry
    volumes: [ pg_data:/var/lib/postgresql/data ]
    networks: [ mmopdca_default ]
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    <<: *default-env
    command: >
      redis-server --requirepass ${REDIS_PASSWORD}          # ← 1 箇所だけで OK  :contentReference[oaicite:1]{index=1}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping" ]
      <<: *retry
    volumes: [ redis_data:/data ]
    networks: [ mmopdca_default ]
    restart: unless-stopped

  ###################### Exporter（AUTH 対応） ##################################
  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    <<: *default-env
    environment:
      CE_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      CE_BACKEND_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      CE_PORT: "9808"
      CE_RETRY_INTERVAL: "5"
    healthcheck:
      test: [ "CMD-SHELL", "curl -sf http://localhost:9808/metrics || exit 1" ]
      <<: *retry
    depends_on:
      redis: { condition: service_started }
    networks: [ mmopdca_default ]
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    <<: *default-env
    command:
      - "--redis.addr=redis://:${REDIS_PASSWORD}@redis:6379/0"
    healthcheck:
      test: [ "CMD-SHELL", "curl -sf http://localhost:9121/metrics || exit 1" ]
      <<: *retry
    depends_on:
      redis: { condition: service_started }
    networks: [ mmopdca_default ]
    restart: unless-stopped

  ###################### 監視スタック ###########################################
  prom:
    image: prom/prometheus:v2.52.0
    command: [ "--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.retention.time=14d" ]
    volumes:
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../prom/rules_mmopdca.yml:/etc/prometheus/rules_mmopdca.yml:ro
      - ../prom/rules/celery_exporter.yml:/etc/prometheus/rules/celery_exporter.yml:ro
      - prom_data:/prometheus
    depends_on:
      celery-exporter: { condition: service_healthy }
      redis-exporter: { condition: service_healthy }
    networks: [ mmopdca_default ]
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.4.2
    <<: *default-env
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prom: { condition: service_healthy }
    networks: [ mmopdca_default ]
    restart: unless-stopped

###################### ボリューム／ネットワーク ###############################
volumes:
  dsl_data:
  checkpoints_data:
  pg_data:
  redis_data:
  prom_data:
  grafana_data:


networks:
  mmopdca_default:
    external: true # 事前に `docker network create mmopdca_default`
