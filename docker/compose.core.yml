# 共通 env_file 定義
x-env: &default-env
  env_file:
    - ../.env

# Healthcheck リトライ設定
x-retry: &retry
  interval: 10s
  timeout: 5s
  start_period: 20s
  retries: 5

services:
  api:
    build:
      context: ..
      dockerfile: Dockerfile.main_api
    user: "1000:1000"
    <<: *default-env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CKPT_DIR=/mnt/checkpoints
    entrypoint:
      - /usr/local/bin/docker-entrypoint-init-dsl.sh
    command:
      - python
      - -m
      - uvicorn
      - api.main_api:app
      - "--host=0.0.0.0"
      - "--port=8001"
      - "--proxy-headers"
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: unless-stopped
    ports:
      - "8001:8001"

  worker:
    build:
      context: ..
      dockerfile: Dockerfile.worker
      target: runtime
    user: "1000:1000"
    <<: *default-env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CKPT_DIR=/mnt/checkpoints
    entrypoint:
      - /usr/local/bin/docker-entrypoint-init-dsl.sh
    command:
      - celery
      - -A
      - core.celery_app:celery_app
      - worker
      - --loglevel=info
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: on-failure

  beat:
    build:
      context: ..
      dockerfile: Dockerfile.worker
      target: runtime
    user: root
    <<: *default-env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DO_TOTAL_SHARDS
      - CKPT_DIR=/mnt/checkpoints
    entrypoint:
      - sh
      - -c
      - |
        mkdir -p /mnt/checkpoints && chmod 0777 /mnt/checkpoints
        exec /usr/local/bin/docker-entrypoint-init-dsl.sh \
          celery -A core.celery_app:celery_app \
          beat --loglevel=info \
               --schedule=/mnt/checkpoints/celerybeat-schedule
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: on-failure

  redis:
    image: redis:7-alpine
    <<: *default-env
    command: >
      redis-server ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ${REDIS_PASSWORD:+-a ${REDIS_PASSWORD}} ping" ]
      <<: *retry
    volumes:
      - redis_data:/data
    networks:
      - mmopdca_default
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    <<: *default-env
    command:
      - "--redis.addr=redis://default:${REDIS_PASSWORD_ENC}@redis:6379"
    ports:
      - "9121:9121"
    healthcheck:
      disable: true
    networks:
      - mmopdca_default
    restart: unless-stopped
  ports:
    - "9121:9121"

  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    <<: *default-env
    environment:
      - CE_BROKER_URL=redis://default:${REDIS_PASSWORD_ENC}@redis:6379/0
      - CE_PORT=9808
    healthcheck:
      disable: true
    networks:
      - mmopdca_default
    restart: unless-stopped
    ports:
      - "9808:9808"

  db:
    image: postgres:16-alpine
    <<: *default-env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -q" ]
      <<: *retry
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - mmopdca_default
    restart: unless-stopped

  prom:
    image: prom/prometheus:v2.52.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=14d
    volumes:
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../prom/rules_mmopdca.yml:/etc/prometheus/rules_mmopdca.yml:ro
      - prom_data:/prometheus
    depends_on:
      redis-exporter:
        condition: service_started
      celery-exporter:
        condition: service_started
    networks:
      - mmopdca_default
    restart: unless-stopped
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-oss:10.4.2
    <<: *default-env
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prom:
        condition: service_started
    networks:
      - mmopdca_default
    restart: unless-stopped
    ports:
      - "3000:3000"

volumes:
  dsl_data:
  checkpoints_data:
  redis_data:
  pgdata:
  prom_data:
  grafana_data:


networks:
  mmopdca_default:
    external: true
