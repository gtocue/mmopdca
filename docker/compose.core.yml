# ファイル名: docker/compose.core.yml
# 用途: API/Worker/Beat/Exporter/Prometheus/Grafana のコア構成

version: "3.9"

services:
  api:
    build:
      context: ..
      dockerfile: Dockerfile.main_api
    user: "1000:1000"
    env_file:
      - ../.env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL
      - CELERY_RESULT_BACKEND
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command:
      - python
      - -m
      - uvicorn
      - api.main_api:app
      - --host
      - "0.0.0.0"
      - --port
      - "8001"
      - --proxy-headers
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: unless-stopped

  worker:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    user: "1000:1000"
    env_file:
      - ../.env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL
      - CELERY_RESULT_BACKEND
    entrypoint: [ "/usr/local/bin/docker-entrypoint-init-dsl.sh" ]
    command:
      - celery
      - -A
      - core.celery_app:celery_app
      - worker
      - --loglevel=info
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: on-failure

  beat:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    # ── １）ここは root（デフォルト）で OK。UID1000でも書き込み可能に chown 済み
    #user: "1000:1000"    ← 削除
    env_file:
      - ../.env
    environment:
      - DSL_ROOT
      - CELERY_BROKER_URL
      - CELERY_RESULT_BACKEND
      - DO_TOTAL_SHARDS
    # ── ２）Entrypoint script にコマンドをそのまま渡す
    entrypoint:
      - /usr/local/bin/docker-entrypoint-init-dsl.sh
      - celery
      - -A
      - core.celery_app:celery_app
      - beat
      - --loglevel=info
      - --schedule=/mnt/checkpoints/celerybeat-schedule
    # command: を使わない
    volumes:
      - dsl_data:/mnt/data/dsl
      - checkpoints_data:/mnt/checkpoints
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: on-failure

  redis:
    image: redis:7.2
    env_file:
      - ../.env
    command:
      - redis-server
      - --requirepass
      - "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mmopdca_default
    restart: unless-stopped

  celery-exporter:
    image: danihodovic/celery-exporter:0.9.1
    env_file:
      - ../.env
    environment:
      CE_BROKER_URL: ${CELERY_BROKER_URL}
      CE_PORT: "9808"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9808/metrics || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    env_file:
      - ../.env
    command:
      - '--redis.addr=${CELERY_BROKER_URL}'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9121/metrics || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: unless-stopped

  prom:
    image: prom/prometheus:v2.52.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=14d
    volumes:
      - ../prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../prom/rules_mmopdca.yml:/etc/prometheus/rules_mmopdca.yml:ro
      - ../prom/rules/celery_exporter.yml:/etc/prometheus/rules/celery_exporter.yml:ro
      - prom_data:/prometheus
    depends_on:
      celery-exporter:
        condition: service_healthy
      redis-exporter:
        condition: service_healthy
      alertmanager:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.4.2
    env_file:
      - ../.env
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prom:
        condition: service_healthy
    networks:
      - mmopdca_default
    restart: unless-stopped

volumes:
  dsl_data:
  checkpoints_data:
  redis_data:
  prom_data:
  grafana_data:


networks:
  mmopdca_default:
    external: true
